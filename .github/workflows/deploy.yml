name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Frontend Build and Test
  frontend-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Build application
      run: npm run build
      env:
        NEXT_TELEMETRY_DISABLED: 1

    - name: Run health check
      run: npm run health-check
      continue-on-error: true

  # Backend Build and Test
  backend-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Test server startup
      run: |
        timeout 30s npm run dev &
        sleep 10
        curl -f http://localhost:3000/api/health/system || exit 1
      continue-on-error: true

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy (placeholder - customize for your deployment target)
  deploy:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy to Production
      run: |
        echo "üöÄ Deploying to production..."
        echo "Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "Add your deployment commands here (e.g., kubectl, docker-compose, etc.)"
        
        # Example deployment commands:
        # kubectl set image deployment/lingualink lingualink=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        # docker-compose pull && docker-compose up -d
        
    - name: Deployment Success
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üåê Application should be available at your production URL"
