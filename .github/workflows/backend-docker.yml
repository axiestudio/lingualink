name: 🚀 Backend Docker Build & Deploy

on:
  push:
    branches: [ main, localllm ]
    paths: 
      - 'backend/**'
      - '.github/workflows/backend-docker.yml'
  pull_request:
    branches: [ main ]
    paths: 
      - 'backend/**'

env:
  REGISTRY: docker.io
  IMAGE_NAME: lingualink-ai-backend

jobs:
  # ============================================================================
  # Test Job - Run tests before building
  # ============================================================================
  test:
    name: 🧪 Test Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: 🧪 Run basic tests
      run: |
        cd backend
        python -m pytest --version || echo "Pytest not available, skipping tests"
        python -c "import app.core.config; print('✅ Config module loads')"
        python -c "import app.models.translation; print('✅ Models module loads')"
        python -c "from app.services.translation_service import TranslationService; print('✅ Translation service imports')"

  # ============================================================================
  # Build Job - Build and push Docker image
  # ============================================================================
  build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        target: production
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          MODEL_NAME=facebook/nllb-200-distilled-600M
          MODEL_CACHE_DIR=/app/models

  # ============================================================================
  # Security Scan Job - Scan Docker image for vulnerabilities
  # ============================================================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Deploy Job - Deploy to staging/production (optional)
  # ============================================================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/localllm' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Docker image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:localllm"
        echo "This would typically deploy to your staging server"
        # Add your deployment commands here
        # Example: kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying to production environment..."
        echo "Docker image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "This would typically deploy to your production server"
        # Add your deployment commands here
        # Example: kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  # ============================================================================
  # Notification Job - Notify on completion
  # ============================================================================
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()
    
    steps:
    - name: 📢 Notify success
      if: needs.test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ Backend Docker build completed successfully!"
        echo "🐳 Image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}"
        echo "🏷️ Tags: ${{ github.ref_name }}, ${{ github.sha }}"
    
    - name: 📢 Notify failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ Backend Docker build failed!"
        echo "🔍 Check the logs above for details"
        exit 1
