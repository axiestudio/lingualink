name: üöÄ LinguaLink AI Fullstack Docker Build & Deploy

on:
  push:
    branches: [ main, backend ]
    paths:
      - 'Backend/**'
      - 'lingualink/**'
      - 'Dockerfile'
      - '.github/workflows/backend-docker.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Backend/**'
      - 'lingualink/**'

env:
  REGISTRY: docker.io
  IMAGE_NAME: lingualink-ai-fullstack

jobs:
  # ============================================================================
  # Test Job - Run tests for both backend and frontend
  # ============================================================================
  test:
    name: üß™ Test Fullstack Application
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: üü¢ Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: lingualink/package-lock.json

    - name: üì¶ Install backend dependencies
      run: |
        cd Backend
        pip install -r requirements.txt

    - name: üì¶ Install frontend dependencies
      run: |
        cd lingualink
        npm ci

    - name: üß™ Test backend
      run: |
        cd Backend
        python -c "import app.core.config; print('‚úÖ Backend config loads')"
        python -c "import app.models.translation; print('‚úÖ Backend models load')"
        python -c "from app.services.translation_service import TranslationService; print('‚úÖ Translation service imports')"

    - name: üß™ Test frontend
      env:
        # Use real GitHub secrets for build-time
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
        CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        CLERK_WEBHOOK_SECRET: ${{ secrets.CLERK_WEBHOOK_SECRET }}
        CLERK_JWT_ISSUER_DOMAIN: ${{ secrets.CLERK_JWT_ISSUER_DOMAIN }}
        NEXT_PUBLIC_CLERK_SIGN_IN_URL: '/sign-in'
        NEXT_PUBLIC_CLERK_SIGN_UP_URL: '/sign-up'
        NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL: '/dashboard'
        NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL: '/dashboard'
        FEATHERLESS_API_KEY: ${{ secrets.FEATHERLESS_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        NEXT_PUBLIC_VAPID_PUBLIC_KEY: ${{ secrets.NEXT_PUBLIC_VAPID_PUBLIC_KEY }}
        VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}
        VAPID_SUBJECT: ${{ secrets.VAPID_SUBJECT }}
      run: |
        cd lingualink
        npm run build
        echo "‚úÖ Frontend builds successfully"

  # ============================================================================
  # Build Job - Build and push FULLSTACK Docker image
  # ============================================================================
  build:
    name: üê≥ Build Fullstack Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîë Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: üìã Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: üèóÔ∏è Build and push FULLSTACK Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          MODEL_NAME=facebook/nllb-200-distilled-600M
          MODEL_CACHE_DIR=/app/models
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
          CLERK_WEBHOOK_SECRET=${{ secrets.CLERK_WEBHOOK_SECRET }}
          CLERK_JWT_ISSUER_DOMAIN=${{ secrets.CLERK_JWT_ISSUER_DOMAIN }}
          FEATHERLESS_API_KEY=${{ secrets.FEATHERLESS_API_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          NEXT_PUBLIC_VAPID_PUBLIC_KEY=${{ secrets.NEXT_PUBLIC_VAPID_PUBLIC_KEY }}
          VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}
          VAPID_SUBJECT=${{ secrets.VAPID_SUBJECT }}

  # ============================================================================
  # Security Scan Job - Scan Docker image for vulnerabilities
  # ============================================================================
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: üîç Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: üì§ Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # Deploy Job - Deploy to staging/production (optional)
  # ============================================================================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/backend' && github.event_name == 'push'
    environment: staging

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üöÄ Deploy to staging
      run: |
        echo "üöÄ Deploying FULLSTACK to staging environment..."
        echo "Docker image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:backend"
        echo "This would typically deploy to your staging server"
        echo "üåê Frontend: Available on port 80 (via nginx)"
        echo "ü§ñ Backend: Available on port 80/api/ (via nginx)"
        echo "üìä Health: Available on port 80/health"
        # Add your deployment commands here
        # Example: docker run -d -p 80:80 ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:backend

  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üåü Deploy to production
      run: |
        echo "üåü Deploying FULLSTACK to production environment..."
        echo "Docker image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest"
        echo "This would typically deploy to your production server"
        echo "üåê Frontend: Available on port 80 (via nginx)"
        echo "ü§ñ Backend: Available on port 80/api/ (via nginx)"
        echo "üìä Health: Available on port 80/health"
        # Add your deployment commands here
        # Example: docker run -d -p 80:80 ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  # ============================================================================
  # Notification Job - Notify on completion
  # ============================================================================
  notify:
    name: üì¢ Notify
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()

    steps:
    - name: üì¢ Notify success
      if: needs.test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "‚úÖ FULLSTACK Docker build completed successfully!"
        echo "üê≥ Image: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}"
        echo "üè∑Ô∏è Tags: ${{ github.ref_name }}, ${{ github.sha }}"
        echo "üåê Frontend: Next.js 15 + React 19"
        echo "ü§ñ Backend: FastAPI + NLLB-200 AI"
        echo "üöÄ Ready for deployment on port 80!"

    - name: üì¢ Notify failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "‚ùå FULLSTACK Docker build failed!"
        echo "üîç Check the logs above for details"
        exit 1
