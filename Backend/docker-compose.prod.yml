# ðŸš€ LinguaLink AI Backend - Production Docker Compose
# Production deployment configuration

version: '3.8'

services:
  # ============================================================================
  # Backend Service - Production
  # ============================================================================
  backend:
    image: ${DOCKER_IMAGE:-lingualink-ai-backend:latest}
    container_name: lingualink-backend-prod
    ports:
      - "8000:8000"
    environment:
      # Server Configuration
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=1
      
      # Model Configuration
      - MODEL_NAME=facebook/nllb-200-distilled-600M
      - MODEL_CACHE_DIR=/app/models
      - DEVICE=auto
      - MAX_LENGTH=512
      
      # Performance Configuration
      - BATCH_SIZE=2
      - ENABLE_CACHING=true
      - CACHE_TTL=7200
      - CACHE_MAX_SIZE=2000
      
      # Memory Management
      - TORCH_COMPILE=true
      - LOW_MEMORY_MODE=false
      
      # API Configuration
      - MAX_TEXT_LENGTH=5000
      - RATE_LIMIT_PER_MINUTE=60
      
      # Security Configuration
      - ENABLE_RATE_LIMITING=true
      - ENABLE_API_KEY_AUTH=false
      
      # Logging Configuration
      - LOG_LEVEL=INFO
      
      # CORS Configuration
      - ALLOWED_ORIGINS=["https://lingualink.tech", "https://www.lingualink.tech"]
      
      # Database (from secrets)
      - DATABASE_URL=${DATABASE_URL}
      
    volumes:
      # Persistent model storage
      - model-data:/app/models
      # Logs
      - ./logs:/app/logs
    
    healthcheck:
      test: ["CMD", "python", "scripts/healthcheck.py"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    
    networks:
      - lingualink-prod-network

  # ============================================================================
  # Load Balancer (Nginx)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: lingualink-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - lingualink-prod-network

  # ============================================================================
  # Redis Cache - Production
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: lingualink-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis-prod-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    networks:
      - lingualink-prod-network

  # ============================================================================
  # Monitoring - Production
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: lingualink-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - prometheus-prod-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - lingualink-prod-network

  grafana:
    image: grafana/grafana:latest
    container_name: lingualink-grafana-prod
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-prod-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - lingualink-prod-network

# ============================================================================
# Networks
# ============================================================================
networks:
  lingualink-prod-network:
    driver: bridge

# ============================================================================
# Volumes
# ============================================================================
volumes:
  model-data:
    driver: local
  redis-prod-data:
    driver: local
  prometheus-prod-data:
    driver: local
  grafana-prod-data:
    driver: local
